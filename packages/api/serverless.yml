service: ${env:APP_NAME}-api
frameworkVersion: '>=2.0.0 <4.0.0'
plugins:
  - serverless-esbuild
  - serverless-dynamodb
  - serverless-offline
custom:
  apiCorsOrigin: '*'
  s3:
    assets:
      local: ${env:APP_NAME}-staging-asset
      staging: ${env:APP_NAME}-${opt:stage}-asset
      prod: ${env:APP_NAME}-${opt:stage}-asset
  deletionPolicy:
    local: Delete
    staging: Delete
    prod: Retain
  updatePolicy:
    local: Delete
    staging: Delete
    prod: Retain
  esbuildAWSExclude:
    local: ''
    staging: '@aws-sdk'
    prod: '@aws-sdk'
  esbuild:
    minify: false
    packager: pnpm
    keepOutputDirectory: true
    sourcemap: linked
    exclude:
      - ${self:custom.esbuildAWSExclude.${opt:stage}}
    watch:
      pattern: src/**/*.ts
      ignore: >-
        scripts/**/* .build/**/* .dynamodb/**/* .serverless/**/* .esbuild/**/*
        node_modules/**/*
  serverless-dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      local:
        sources:
          - table: ${env:APP_NAME}-${opt:stage}-admin
            sources:
              - ./src/baseblocks/admin/admin.seed.json
          - table: ${env:APP_NAME}-${opt:stage}-asset
            sources:
              - ./src/baseblocks/asset/asset.seed.json
          - table: ${env:APP_NAME}-${opt:stage}-textract-asset
            sources:
              - ./src/baseblocks/textract-asset/textract-asset.seed.json
package:
  individually: true
provider:
  name: aws
  deploymentMethod: direct
  runtime: nodejs20.x
  profile: ${env:AWS_PROFILE}
  stage: ${opt:stage}
  stackTags:
    AppName: ${env:APP_NAME}
    Stage: ${opt:stage}
    Region: ${opt:region}
    Product: Baseline
  timeout: 900
  architecture: arm64
  memorySize: 2048
  logRetentionInDays: 90
  versionFunctions: false
  endpointType: REGIONAL
  environment:
    APP_NAME: ${env:APP_NAME}
    NODE_OPTIONS: '--enable-source-maps'
    NODE_ENV: ${opt:stage}
    API_REGION: ${opt:region}
    API_CORS_ORIGIN: ${self:custom.apiCorsOrigin}
    ASSET_BUCKET_NAME: ${env:APP_NAME}-${opt:stage}-asset
    COGNITO_USER_POOL_ID:
      Ref: CognitoUserPool
  apiGateway:
    minimumCompressionSize: 1024
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
          Resource:
            - !Sub ${adminTable.Arn}
            - !Sub ${adminTable.Arn}/index/*
            - !Sub ${assetTable.Arn}
            - !Sub ${assetTable.Arn}/index/*
            - !Sub ${textractAssetTable.Arn}
            - !Sub ${textractAssetTable.Arn}/index/*
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminGetUser
            - cognito-idp:ListUsers
          Resource:
            - !Sub ${CognitoUserPool.Arn}
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${env:APP_NAME}-${opt:stage}-asset/*
        - Effect: Allow
          Action:
            - textract:DetectDocumentText
            - textract:AnalyzeDocument
            - textract:StartDocumentTextDetection
            - textract:GetDocumentTextDetection
          Resource: '*'
resources:
  - ${file(./src/baseblocks/cognito/cognito-resources.yml)}
  - ${file(./src/baseblocks/admin/admin-dynamodb.yml)}
  - ${file(./src/baseblocks/asset/asset-dynamodb.yml)}
  - ${file(./src/baseblocks/asset/asset-s3.yml)}
  - ${file(./src/baseblocks/textract-asset/textract-asset-dynamodb.yml)}
functions:
  - ${file(./src/baseblocks/admin/admin-functions.yml)}
  - ${file(./src/baseblocks/asset/asset-functions.yml)}
  - ${file(./src/baseblocks/textract-asset/textract-asset-functions.yml)}
